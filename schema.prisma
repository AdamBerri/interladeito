// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource postgresql {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                    String     @id @default(cuid())
  name                  String     @default("")
  email                 String     @unique @default("")
  password              String
  posts                 Post[]     @relation("Post_author")
  contractPermissions   Contract[] @relation("Contract_permissions")
  createdAt             DateTime?  @default(now())
  stripe                String     @default("")
  auth0id               String     @default("")
  role                  String     @default("")
  from_Contract_shipper Contract[] @relation("Contract_shipper")
}

model Contract {
  id                  String    @id @default(cuid())
  createdAt           DateTime? @default(now())
  permissions         User[]    @relation("Contract_permissions")
  shipper             User?     @relation("Contract_shipper", fields: [shipperId], references: [id])
  shipperId           String?   @map("shipper")
  file_filesize       Int?
  file_filename       String?
  consignee           String    @default("")
  images              Photo?    @relation("Contract_images", fields: [imagesId], references: [id])
  imagesId            String?   @map("images")
  from_Photo_contract Photo[]   @relation("Photo_contract")

  @@index([shipperId])
  @@index([imagesId])
}

model Photo {
  id                   String     @id @default(cuid())
  contract             Contract?  @relation("Photo_contract", fields: [contractId], references: [id])
  contractId           String?    @map("contract")
  createdAt            DateTime?  @default(now())
  image_filesize       Int?
  image_extension      String?
  image_width          Int?
  image_height         Int?
  image_id             String?
  from_Contract_images Contract[] @relation("Contract_images")

  @@index([contractId])
}

model Post {
  id       String  @id @default(cuid())
  title    String  @default("")
  content  Json    @default("[{\"type\":\"paragraph\",\"children\":[{\"text\":\"\"}]}]")
  author   User?   @relation("Post_author", fields: [authorId], references: [id])
  authorId String? @map("author")
  tags     Tag[]   @relation("Post_tags")

  @@index([authorId])
}

model Tag {
  id    String @id @default(cuid())
  name  String @default("")
  posts Post[] @relation("Post_tags")
}
